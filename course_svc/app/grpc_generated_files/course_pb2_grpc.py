# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import course_types_pb2 as course__types__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import tag_types_pb2 as tag__types__pb2


class CourseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListProfessions = channel.unary_unary(
                '/CourseService/ListProfessions',
                request_serializer=course__types__pb2.ListProfessionsRequest.SerializeToString,
                response_deserializer=course__types__pb2.ListProfessionsResponse.FromString,
                )
        self.GetProfession = channel.unary_unary(
                '/CourseService/GetProfession',
                request_serializer=course__types__pb2.GetProfessionRequest.SerializeToString,
                response_deserializer=course__types__pb2.ProfessionMessage.FromString,
                )
        self.CreateProfession = channel.unary_unary(
                '/CourseService/CreateProfession',
                request_serializer=course__types__pb2.CreateUpdateProfessionRequest.SerializeToString,
                response_deserializer=course__types__pb2.ProfessionMessage.FromString,
                )
        self.UpdateProfession = channel.unary_unary(
                '/CourseService/UpdateProfession',
                request_serializer=course__types__pb2.UpdateProfessionRequest.SerializeToString,
                response_deserializer=course__types__pb2.ProfessionMessage.FromString,
                )
        self.DeleteProfession = channel.unary_unary(
                '/CourseService/DeleteProfession',
                request_serializer=course__types__pb2.DeleteProfessionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ListTags = channel.unary_unary(
                '/CourseService/ListTags',
                request_serializer=tag__types__pb2.ListTagsRequest.SerializeToString,
                response_deserializer=tag__types__pb2.ListTagsResponse.FromString,
                )
        self.GetTag = channel.unary_unary(
                '/CourseService/GetTag',
                request_serializer=tag__types__pb2.GetTagRequest.SerializeToString,
                response_deserializer=tag__types__pb2.TagMessage.FromString,
                )
        self.CreateTag = channel.unary_unary(
                '/CourseService/CreateTag',
                request_serializer=tag__types__pb2.CreateUpdateTagRequest.SerializeToString,
                response_deserializer=tag__types__pb2.TagMessage.FromString,
                )
        self.UpdateTag = channel.unary_unary(
                '/CourseService/UpdateTag',
                request_serializer=tag__types__pb2.UpdateTagRequest.SerializeToString,
                response_deserializer=tag__types__pb2.TagMessage.FromString,
                )
        self.DeleteTag = channel.unary_unary(
                '/CourseService/DeleteTag',
                request_serializer=tag__types__pb2.DeleteTagRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class CourseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListProfessions(self, request, context):
        """Profession
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProfession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateProfession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateProfession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteProfession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTags(self, request, context):
        """Tag
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CourseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListProfessions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListProfessions,
                    request_deserializer=course__types__pb2.ListProfessionsRequest.FromString,
                    response_serializer=course__types__pb2.ListProfessionsResponse.SerializeToString,
            ),
            'GetProfession': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProfession,
                    request_deserializer=course__types__pb2.GetProfessionRequest.FromString,
                    response_serializer=course__types__pb2.ProfessionMessage.SerializeToString,
            ),
            'CreateProfession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProfession,
                    request_deserializer=course__types__pb2.CreateUpdateProfessionRequest.FromString,
                    response_serializer=course__types__pb2.ProfessionMessage.SerializeToString,
            ),
            'UpdateProfession': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateProfession,
                    request_deserializer=course__types__pb2.UpdateProfessionRequest.FromString,
                    response_serializer=course__types__pb2.ProfessionMessage.SerializeToString,
            ),
            'DeleteProfession': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteProfession,
                    request_deserializer=course__types__pb2.DeleteProfessionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListTags': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTags,
                    request_deserializer=tag__types__pb2.ListTagsRequest.FromString,
                    response_serializer=tag__types__pb2.ListTagsResponse.SerializeToString,
            ),
            'GetTag': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTag,
                    request_deserializer=tag__types__pb2.GetTagRequest.FromString,
                    response_serializer=tag__types__pb2.TagMessage.SerializeToString,
            ),
            'CreateTag': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTag,
                    request_deserializer=tag__types__pb2.CreateUpdateTagRequest.FromString,
                    response_serializer=tag__types__pb2.TagMessage.SerializeToString,
            ),
            'UpdateTag': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTag,
                    request_deserializer=tag__types__pb2.UpdateTagRequest.FromString,
                    response_serializer=tag__types__pb2.TagMessage.SerializeToString,
            ),
            'DeleteTag': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTag,
                    request_deserializer=tag__types__pb2.DeleteTagRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CourseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CourseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListProfessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CourseService/ListProfessions',
            course__types__pb2.ListProfessionsRequest.SerializeToString,
            course__types__pb2.ListProfessionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProfession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CourseService/GetProfession',
            course__types__pb2.GetProfessionRequest.SerializeToString,
            course__types__pb2.ProfessionMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateProfession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CourseService/CreateProfession',
            course__types__pb2.CreateUpdateProfessionRequest.SerializeToString,
            course__types__pb2.ProfessionMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateProfession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CourseService/UpdateProfession',
            course__types__pb2.UpdateProfessionRequest.SerializeToString,
            course__types__pb2.ProfessionMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteProfession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CourseService/DeleteProfession',
            course__types__pb2.DeleteProfessionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CourseService/ListTags',
            tag__types__pb2.ListTagsRequest.SerializeToString,
            tag__types__pb2.ListTagsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CourseService/GetTag',
            tag__types__pb2.GetTagRequest.SerializeToString,
            tag__types__pb2.TagMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CourseService/CreateTag',
            tag__types__pb2.CreateUpdateTagRequest.SerializeToString,
            tag__types__pb2.TagMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CourseService/UpdateTag',
            tag__types__pb2.UpdateTagRequest.SerializeToString,
            tag__types__pb2.TagMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CourseService/DeleteTag',
            tag__types__pb2.DeleteTagRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
